08048484 <parell>:
 8048484:	55                   	push   ebp
 8048485:	89 e5                	mov    ebp,esp
 8048487:	83 ec 18             	sub    esp,0x18
 804848a:	8d 45 fc             	lea    eax,[ebp-0x4]                  
 804848d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax        # <entered_password>
 8048491:	c7 44 24 04 68 86 04 	mov    DWORD PTR [esp+0x4],0x8048668  # "%d"
 8048498:	08 
 8048499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 804849c:	89 04 24             	mov    DWORD PTR [esp],eax
 804849f:	e8 00 ff ff ff       	call   80483a4 <sscanf@plt>           # Read <entered_password> into an integer
 80484a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]      
 80484a7:	83 e0 01             	and    eax,0x1                        # Logical AND integer with one
 80484aa:	85 c0                	test   eax,eax                        # If (integer AND one) AND (integer AND one) is zero...
 80484ac:	75 18                	jne    80484c6 <parell+0x42>          # ...in other words an even number!...
 80484ae:	c7 04 24 6b 86 04 08 	mov    DWORD PTR [esp],0x804866b      # ..."Password OK!\n"
 80484b5:	e8 da fe ff ff       	call   8048394 <printf@plt>
 80484ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
 80484c1:	e8 ee fe ff ff       	call   80483b4 <exit@plt>             # Exit successfully
 80484c6:	c9                   	leave  
 80484c7:	c3                   	ret    

080484c8 <check>:
 80484c8:	55                   	push   ebp
 80484c9:	89 e5                	mov    ebp,esp
 80484cb:	83 ec 28             	sub    esp,0x28
 80484ce:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0       # Index of digit in <entered_password>
 80484d5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0       # Sum of digits
 80484dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 80484df:	89 04 24             	mov    DWORD PTR [esp],eax
 80484e2:	e8 9d fe ff ff       	call   8048384 <strlen@plt>          # Get length of <entered_password>
 80484e7:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax       # Compares the length with a counter...
 80484ea:	73 46                	jae    8048532 <check+0x6a>          # ...and if the counter is greater, the password is incorrect
 80484ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 80484ef:	03 45 08             	add    eax,DWORD PTR [ebp+0x8]
 80484f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80484f5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
 80484f8:	8d 45 fc             	lea    eax,[ebp-0x4]
 80484fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax       # Place to write digit
 80484ff:	c7 44 24 04 68 86 04 	mov    DWORD PTR [esp+0x4],x8048668  # "%d"
 8048506:	08 
 8048507:	8d 45 f3             	lea    eax,[ebp-0xd]
 804850a:	89 04 24             	mov    DWORD PTR [esp],eax           # Digit of the entered password to read
 804850d:	e8 92 fe ff ff       	call   80483a4 <sscanf@plt>
 8048512:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]       # Put digit into edx
 8048515:	8d 45 f8             	lea    eax,[ebp-0x8]                 # 
 8048518:	01 10                	add    DWORD PTR [eax],edx           # Add digit to sum
 804851a:	83 7d f8 10          	cmp    DWORD PTR [ebp-0x8],0x10      # Compare sum to 16
 804851e:	75 0b                	jne    804852b <check+0x63>          # If digits sum to 16...
 8048520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 8048523:	89 04 24             	mov    DWORD PTR [esp],eax
 8048526:	e8 59 ff ff ff       	call   8048484 <parell>              # ...call parell(<entered_password>)
 804852b:	8d 45 f4             	lea    eax,[ebp-0xc]
 804852e:	ff 00                	inc    DWORD PTR [eax]
 8048530:	eb aa                	jmp    80484dc <check+0x14>
 8048532:	c7 04 24 79 86 04 08 	mov    DWORD PTR [esp],0x8048679    # "Password Incorrect!\n"
 8048539:	e8 56 fe ff ff       	call   8048394 <printf@plt>
 804853e:	c9                   	leave  
 804853f:	c3                   	ret    

08048540 <main>:
 8048540:	55                   	push   ebp
 8048541:	89 e5                	mov    ebp,esp
 8048543:	81 ec 88 00 00 00    	sub    esp,0x88
 8048549:	83 e4 f0             	and    esp,0xfffffff0
 804854c:	b8 00 00 00 00       	mov    eax,0x0
 8048551:	83 c0 0f             	add    eax,0xf
 8048554:	83 c0 0f             	add    eax,0xf
 8048557:	c1 e8 04             	shr    eax,0x4
 804855a:	c1 e0 04             	shl    eax,0x4
 804855d:	29 c4                	sub    esp,eax
 804855f:	c7 04 24 8e 86 04 08 	mov    DWORD PTR [esp],0x804868e  # "IOLI Crackme Level 0x05\n"
 8048566:	e8 29 fe ff ff       	call   8048394 <printf@plt>
 804856b:	c7 04 24 a7 86 04 08 	mov    DWORD PTR [esp],0x80486a7  # "Password: "
 8048572:	e8 1d fe ff ff       	call   8048394 <printf@plt>
 8048577:	8d 45 88             	lea    eax,[ebp-0x78]
 804857a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804857e:	c7 04 24 b2 86 04 08 	mov    DWORD PTR [esp],0x80486b2  # "%s"
 8048585:	e8 ea fd ff ff       	call   8048374 <scanf@plt>
 804858a:	8d 45 88             	lea    eax,[ebp-0x78]             # Call check(<entered_password>)
 804858d:	89 04 24             	mov    DWORD PTR [esp],eax
 8048590:	e8 33 ff ff ff       	call   80484c8 <check>
 8048595:	b8 00 00 00 00       	mov    eax,0x0
 804859a:	c9                   	leave  
 804859b:	c3                   	ret    
 804859c:	90                   	nop
 804859d:	90                   	nop
 804859e:	90                   	nop
 804859f:	90                   	nop
