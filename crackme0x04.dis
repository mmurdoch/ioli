08048484 <check>:                                                             # Iterates through the chars in the input <read_string>
 8048484:	55                   	push   ebp
 8048485:	89 e5                	mov    ebp,esp
 8048487:	83 ec 28             	sub    esp,0x28
 804848a:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0        # Initialize checksum (?) to zero
 8048491:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0        # Initialize $ebp-0xc counter to zero
 8048498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]        # Put <read_string> into $eax
 804849b:	89 04 24             	mov    DWORD PTR [esp],eax
 804849e:	e8 e1 fe ff ff       	call   8048384 <strlen@plt>           # Get the length of <read_string>...
 80484a3:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax        # ...and compare it with $ebp-0xc counter
 80484a6:	73 53                	jae    80484fb <check+0x77>           # Exit the loop if processed all chars in <read_string>
 80484a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 80484ab:	03 45 08             	add    eax,DWORD PTR [ebp+0x8]        # Move <read_string> into $eax
 80484ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80484b1:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
 80484b4:	8d 45 fc             	lea    eax,[ebp-0x4]
 80484b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 80484bb:	c7 44 24 04 38 86 04 	mov    DWORD PTR [esp+0x4],0x8048638
 80484c2:	08 
 80484c3:	8d 45 f3             	lea    eax,[ebp-0xd]                  # From string at $ebp-0xd...
 80484c6:	89 04 24             	mov    DWORD PTR [esp],eax
 80484c9:	e8 d6 fe ff ff       	call   80483a4 <sscanf@plt>           # ...read an integer (0x8048638 = "%d") into $ebp-0x4
 80484ce:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
 80484d1:	8d 45 f8             	lea    eax,[ebp-0x8]
 80484d4:	01 10                	add    DWORD PTR [eax],edx            # ...and add it to checksum (?)
 80484d6:	83 7d f8 0f          	cmp    DWORD PTR [ebp-0x8],0xf        # If checksum (?) equals 15, success!
 80484da:	75 18                	jne    80484f4 <check+0x70>           # \ 
 80484dc:	c7 04 24 3b 86 04 08 	mov    DWORD PTR [esp],0x804863b      # |
 80484e3:	e8 ac fe ff ff       	call   8048394 <printf@plt>           # | Print "Password OK!\n"
 80484e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0            # |
 80484ef:	e8 c0 fe ff ff       	call   80483b4 <exit@plt>             # |
 80484f4:	8d 45 f4             	lea    eax,[ebp-0xc]                  # < 
 80484f7:	ff 00                	inc    DWORD PTR [eax]                # Increment $ebp-0xc counter
 80484f9:	eb 9d                	jmp    8048498 <check+0x14>           # Return to the top of the loop
 80484fb:	c7 04 24 49 86 04 08 	mov    DWORD PTR [esp],0x8048649      # Loop exit if all <read_string> chars processed
 8048502:	e8 8d fe ff ff       	call   8048394 <printf@plt>           # Print "Password Incorrect!\n"
 8048507:	c9                   	leave  
 8048508:	c3                   	ret    

08048509 <main>:
 8048509:	55                   	push   ebp
 804850a:	89 e5                	mov    ebp,esp
 804850c:	81 ec 88 00 00 00    	sub    esp,0x88
 8048512:	83 e4 f0             	and    esp,0xfffffff0
 8048515:	b8 00 00 00 00       	mov    eax,0x0
 804851a:	83 c0 0f             	add    eax,0xf
 804851d:	83 c0 0f             	add    eax,0xf
 8048520:	c1 e8 04             	shr    eax,0x4
 8048523:	c1 e0 04             	shl    eax,0x4
 8048526:	29 c4                	sub    esp,eax
 8048528:	c7 04 24 5e 86 04 08 	mov    DWORD PTR [esp],0x804865e
 804852f:	e8 60 fe ff ff       	call   8048394 <printf@plt>       # print "IOLI Crackme Level 0x04\n" (0x804865e)
 8048534:	c7 04 24 77 86 04 08 	mov    DWORD PTR [esp],0x8048677
 804853b:	e8 54 fe ff ff       	call   8048394 <printf@plt>       # print "Password: " (0x8048677)
 8048540:	8d 45 88             	lea    eax,[ebp-0x78]
 8048543:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048547:	c7 04 24 82 86 04 08 	mov    DWORD PTR [esp],0x8048682
 804854e:	e8 21 fe ff ff       	call   8048374 <scanf@plt>        # Read a string (0x8048682 = "%s") into $ebp-0x78
 8048553:	8d 45 88             	lea    eax,[ebp-0x78]
 8048556:	89 04 24             	mov    DWORD PTR [esp],eax
 8048559:	e8 26 ff ff ff       	call   8048484 <check>            # Call check(<read_string>)
 804855e:	b8 00 00 00 00       	mov    eax,0x0
 8048563:	c9                   	leave  
 8048564:	c3                   	ret    
 8048565:	90                   	nop
 8048566:	90                   	nop
 8048567:	90                   	nop
 8048568:	90                   	nop
 8048569:	90                   	nop
 804856a:	90                   	nop
 804856b:	90                   	nop
 804856c:	90                   	nop
 804856d:	90                   	nop
 804856e:	90                   	nop
 804856f:	90                   	nop
